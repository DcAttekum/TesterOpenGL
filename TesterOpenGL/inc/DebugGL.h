#ifndef DEBUGGL_H_
#define DEBUGGL_H_

#include <GLEW/glew.h>

// Easier way to handle opengl debugging. The GL_DEBUG and GL_RELEASE are defined in the 
// preprocessor (project->properties->c/c++). This way you won't get any debugging features
// in the release build. In the release version the GLCall still runs the code that it is
// given, but doesn't do any of the error checking. GLAssert does not do anything, so do not
// put code in there that still needs running.
#if GL_DEBUG == 1
#define GLAssert(x) if(x) __debugbreak()
#define GLDebug(x)\
    GLClearError();\
    x;\
    GLAssert(GLLogError(#x, __FILE__, __LINE__));
#elif GL_RELEASE == 1
#define GLAssert(x) 
#define GLCall(x) x;
#endif

// To clean up any potential errors generated before calling the method you want to assert.
// This way you know that the errors you get back when you call GLLogError are the ones
// generated by the call you just did.
void GLClearError();

// Usually called right after an opengl call to check for errors in debugging.
bool GLLogError(const char* function, const char* file, int line);

#endif // !DEBUGGL_H_
